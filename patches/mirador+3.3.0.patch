diff --git a/node_modules/mirador/__tests__/src/lib/CanvasGroupings.test.js b/node_modules/mirador/__tests__/src/lib/CanvasGroupings.test.js
index 2732be7..2d30cc1 100644
--- a/node_modules/mirador/__tests__/src/lib/CanvasGroupings.test.js
+++ b/node_modules/mirador/__tests__/src/lib/CanvasGroupings.test.js
@@ -34,6 +34,37 @@ describe('CanvasGroupings', () => {
       it('second grouping has 2 canvases', () => {
         expect(subject.groupings()[1]).toEqual([1, 2]);
       });
+      describe('with facing pages', () => {
+        beforeEach(() => {
+          subject = new CanvasGroupings([0, 1, 2, { getViewingHint: () => 'facing-pages', id: 3 }, 4], 'book');
+        });
+        it('puts the facing page in its own grouping', () => {
+          expect(subject.groupings()[0]).toEqual([0]);
+          expect(subject.groupings()[1]).toEqual([1, 2]);
+          expect(subject.groupings()[2][0].id).toEqual(3);
+          expect(subject.groupings()[3]).toEqual([4]);
+        });
+      });
+      describe('with a non-paged canvas', () => {
+        beforeEach(() => {
+          subject = new CanvasGroupings([0, 1, { getViewingHint: () => 'non-paged', id: 'non-paged' }, 2], 'book');
+        });
+        it('puts the non-paged canvases at the end', () => {
+          expect(subject.groupings()[0]).toEqual([0]);
+          expect(subject.groupings()[1]).toEqual([1, 2]);
+          expect(subject.groupings()[2][0].id).toEqual('non-paged');
+        });
+      });
+      describe('with a non-paged canvas first', () => {
+        beforeEach(() => {
+          subject = new CanvasGroupings([{ getViewingHint: () => 'non-paged', id: 'non-paged' }, 0, 1, 2], 'book');
+        });
+        it('puts the non-paged canvases at the end and makes the first paged canvas stand alone', () => {
+          expect(subject.groupings()[0]).toEqual([0]);
+          expect(subject.groupings()[1]).toEqual([1, 2]);
+          expect(subject.groupings()[2][0].id).toEqual('non-paged');
+        });
+      });
     });
     describe('scroll', () => {
       let subject;
@@ -58,10 +89,22 @@ describe('CanvasGroupings', () => {
       beforeEach(() => {
         subject = new CanvasGroupings([0, 1, 2, 3], 'book');
       });
-      it('selects by index / 2', () => {
+      it('selects by index', () => {
         expect(subject.getCanvases(2)).toEqual([1, 2]);
       });
     });
+    describe('book with facing pages', () => {
+      let subject;
+      beforeEach(() => {
+        subject = new CanvasGroupings([0, 1, { getViewingHint: () => 'facing-pages', id: 2 }, 3], 'book');
+      });
+      it('selects by index', () => {
+        expect(subject.getCanvases(0)).toEqual([0]);
+        expect(subject.getCanvases(1)).toEqual([1]);
+        expect(subject.getCanvases(2)[0].id).toEqual(2);
+        expect(subject.getCanvases(3)).toEqual([3]);
+      });
+    });
     describe('gallery', () => {
       it('selects by index', () => {
         const subject = new CanvasGroupings([0, 1, 2, 3]);
diff --git a/node_modules/mirador/src/components/ThumbnailCanvasGrouping.js b/node_modules/mirador/src/components/ThumbnailCanvasGrouping.js
index 72f08bb..8c866f3 100644
--- a/node_modules/mirador/src/components/ThumbnailCanvasGrouping.js
+++ b/node_modules/mirador/src/components/ThumbnailCanvasGrouping.js
@@ -18,16 +18,6 @@ export class ThumbnailCanvasGrouping extends PureComponent {
     setCanvas(e.currentTarget.dataset.canvasId);
   }
 
-  /**
-   * Determines whether the current index is the rendered canvas, providing
-   * a useful class.
-   */
-  currentCanvasClass(canvasIndices) {
-    const { index } = this.props;
-    if (canvasIndices.includes(index)) return 'current-canvas-grouping';
-    return '';
-  }
-
   /** */
   render() {
     const {
@@ -37,6 +27,7 @@ export class ThumbnailCanvasGrouping extends PureComponent {
       canvasGroupings, position, height,
     } = data;
     const currentGroupings = canvasGroupings[index];
+    const current = currentGroupings.map(canvas => canvas.id).includes(currentCanvasId);
     const SPACING = 8;
     return (
       <div
@@ -64,11 +55,10 @@ export class ThumbnailCanvasGrouping extends PureComponent {
             width: (position === 'far-bottom') ? 'auto' : `${style.width}px`,
           }}
           className={classNames(
-            ns(['thumbnail-nav-canvas', `thumbnail-nav-canvas-${index}`, this.currentCanvasClass(currentGroupings.map(canvas => canvas.index))]),
+            ns(['thumbnail-nav-canvas', `thumbnail-nav-canvas-${index}`, current ? 'current-canvas-grouping' : '']),
             classes.canvas,
             {
-              [classes.currentCanvas]: currentGroupings
-                .map(canvas => canvas.id).includes(currentCanvasId),
+              [classes.currentCanvas]: current,
             },
           )}
         >
diff --git a/node_modules/mirador/src/components/ThumbnailNavigation.js b/node_modules/mirador/src/components/ThumbnailNavigation.js
index e7c6db2..8e9198a 100644
--- a/node_modules/mirador/src/components/ThumbnailNavigation.js
+++ b/node_modules/mirador/src/components/ThumbnailNavigation.js
@@ -31,14 +31,13 @@ export class ThumbnailNavigation extends Component {
    * of the grids
    */
   componentDidUpdate(prevProps) {
-    const { canvasIndex, position, view } = this.props;
+    const { canvasGroupings, currentCanvasId, position, view } = this.props;
     if (prevProps.view !== view && position !== 'off') {
       this.gridRef.current.resetAfterIndex(0);
     }
-    if (prevProps.canvasIndex !== canvasIndex) {
-      let index = canvasIndex;
-      if (view === 'book') index = Math.ceil(index / 2);
-      this.gridRef.current.scrollToItem(index, 'center');
+    if (prevProps.currentCanvasId !== currentCanvasId) {
+      const index = canvasGroupings.findIndex(group => group.map(canvas => canvas.id).includes(currentCanvasId));
+      if (index) this.gridRef.current.scrollToItem(index, 'center');
     }
   }
 
@@ -234,8 +233,8 @@ export class ThumbnailNavigation extends Component {
 
 ThumbnailNavigation.propTypes = {
   canvasGroupings: PropTypes.array.isRequired, // eslint-disable-line react/forbid-prop-types
-  canvasIndex: PropTypes.number.isRequired,
   classes: PropTypes.objectOf(PropTypes.string).isRequired,
+  currentCanvasId: PropTypes.string,
   hasNextCanvas: PropTypes.bool,
   hasPreviousCanvas: PropTypes.bool,
   position: PropTypes.string.isRequired,
diff --git a/node_modules/mirador/src/components/ThumbnailNavigation.js.orig b/node_modules/mirador/src/components/ThumbnailNavigation.js.orig
new file mode 100644
index 0000000..e7c6db2
--- /dev/null
+++ b/node_modules/mirador/src/components/ThumbnailNavigation.js.orig
@@ -0,0 +1,258 @@
+import React, { Component } from 'react';
+import PropTypes from 'prop-types';
+import Paper from '@material-ui/core/Paper';
+import AutoSizer from 'react-virtualized-auto-sizer';
+import { VariableSizeList as List } from 'react-window';
+import classNames from 'classnames';
+import CanvasWorld from '../lib/CanvasWorld';
+import ThumbnailCanvasGrouping from '../containers/ThumbnailCanvasGrouping';
+import ns from '../config/css-ns';
+
+/**
+ */
+export class ThumbnailNavigation extends Component {
+  /**
+   */
+  constructor(props) {
+    super(props);
+
+    this.scrollbarSize = 15;
+    this.spacing = 8; // 2 * (2px margin + 2px border + 2px padding + 2px padding)
+    this.calculateScaledSize = this.calculateScaledSize.bind(this);
+    this.itemCount = this.itemCount.bind(this);
+    this.handleKeyUp = this.handleKeyUp.bind(this);
+    this.nextCanvas = this.nextCanvas.bind(this);
+    this.previousCanvas = this.previousCanvas.bind(this);
+    this.gridRef = React.createRef();
+  }
+
+  /**
+   * If the view has changed and the thumbnailNavigation is open, recompute all
+   * of the grids
+   */
+  componentDidUpdate(prevProps) {
+    const { canvasIndex, position, view } = this.props;
+    if (prevProps.view !== view && position !== 'off') {
+      this.gridRef.current.resetAfterIndex(0);
+    }
+    if (prevProps.canvasIndex !== canvasIndex) {
+      let index = canvasIndex;
+      if (view === 'book') index = Math.ceil(index / 2);
+      this.gridRef.current.scrollToItem(index, 'center');
+    }
+  }
+
+  /** */
+  handleKeyUp(e) {
+    const { position } = this.props;
+    let nextKey = 'ArrowRight';
+    let previousKey = 'ArrowLeft';
+    if (position === 'far-right') {
+      nextKey = 'ArrowDown';
+      previousKey = 'ArrowUp';
+    }
+    switch (e.key) {
+      case nextKey:
+        this.nextCanvas();
+        break;
+      case previousKey:
+        this.previousCanvas();
+        break;
+      default:
+        break;
+    }
+  }
+
+  /**
+   * When on right, row height
+   * When on bottom, column width
+   */
+  calculateScaledSize(index) {
+    const { thumbnailNavigation, canvasGroupings, position } = this.props;
+    const canvases = canvasGroupings[index];
+    if (!canvases) return thumbnailNavigation.width + this.spacing;
+
+    const world = new CanvasWorld(canvases);
+    const bounds = world.worldBounds();
+    switch (position) {
+      case 'far-right': {
+        const calc = Math.floor(
+          this.calculatingWidth(canvases.length) * bounds[3] / bounds[2],
+        );
+        if (!Number.isInteger(calc)) return thumbnailNavigation.width + this.spacing;
+        return calc + this.spacing;
+      }
+      // Default case bottom
+      default: {
+        if (bounds[3] === 0) return thumbnailNavigation.width + this.spacing;
+        const calc = Math.ceil(
+          (thumbnailNavigation.height - this.scrollbarSize - this.spacing - 4)
+           * bounds[2] / bounds[3],
+        );
+        return calc;
+      }
+    }
+  }
+
+  /** */
+  calculatingWidth(canvasesLength) {
+    const { thumbnailNavigation } = this.props;
+    if (canvasesLength === 1) {
+      return thumbnailNavigation.width;
+    }
+    return thumbnailNavigation.width * 2;
+  }
+
+  /** */
+  rightWidth() {
+    const { view, thumbnailNavigation } = this.props;
+    switch (view) {
+      case 'book':
+        return (thumbnailNavigation.width * 2);
+      default:
+        return thumbnailNavigation.width;
+    }
+  }
+
+  /** */
+  style() {
+    const { position, thumbnailNavigation } = this.props;
+    switch (position) {
+      case 'far-right':
+        return {
+          height: '100%',
+          minHeight: 0,
+          width: `${this.rightWidth() + this.scrollbarSize + this.spacing}px`,
+        };
+      // Default case bottom
+      default:
+        return {
+          height: `${thumbnailNavigation.height}px`,
+          width: '100%',
+        };
+    }
+  }
+
+  /** */
+  areaHeight(height) {
+    const { position, thumbnailNavigation } = this.props;
+    switch (position) {
+      case 'far-right':
+        return height;
+      // Default case bottom
+      default:
+        return thumbnailNavigation.height;
+    }
+  }
+
+  /** */
+  itemCount() {
+    const { canvasGroupings } = this.props;
+    return canvasGroupings.length;
+  }
+
+  /**
+   */
+  nextCanvas() {
+    const { hasNextCanvas, setNextCanvas } = this.props;
+    if (hasNextCanvas) {
+      setNextCanvas();
+    }
+  }
+
+  /**
+   */
+  previousCanvas() {
+    const { hasPreviousCanvas, setPreviousCanvas } = this.props;
+    if (hasPreviousCanvas) {
+      setPreviousCanvas();
+    }
+  }
+
+  /**
+   * Renders things
+   */
+  render() {
+    const {
+      t,
+      canvasGroupings,
+      classes,
+      position,
+      thumbnailNavigation,
+      viewingDirection,
+      windowId,
+    } = this.props;
+    if (position === 'off') {
+      return null;
+    }
+    const htmlDir = viewingDirection === 'right-to-left' ? 'rtl' : 'ltr';
+    const itemData = {
+      canvasGroupings,
+      height: thumbnailNavigation.height - this.spacing - this.scrollbarSize,
+      position,
+      windowId,
+    };
+    return (
+      <Paper
+        className={classNames(
+          ns('thumb-navigation'),
+          classes.thumbNavigation,
+        )}
+        aria-label={t('thumbnailNavigation')}
+        square
+        elevation={0}
+        style={this.style()}
+        tabIndex={0}
+        onKeyUp={this.handleKeyUp}
+        role="grid"
+      >
+        <div role="row" style={{ height: '100%', width: '100%' }}>
+          <AutoSizer
+            defaultHeight={100}
+            defaultWidth={400}
+          >
+            {({ height, width }) => (
+              <List
+                direction={htmlDir}
+                height={this.areaHeight(height)}
+                itemCount={this.itemCount()}
+                itemSize={this.calculateScaledSize}
+                width={width}
+                layout={(position === 'far-bottom') ? 'horizontal' : 'vertical'}
+                itemData={itemData}
+                ref={this.gridRef}
+              >
+                {ThumbnailCanvasGrouping}
+              </List>
+            )}
+          </AutoSizer>
+        </div>
+      </Paper>
+    );
+  }
+}
+
+ThumbnailNavigation.propTypes = {
+  canvasGroupings: PropTypes.array.isRequired, // eslint-disable-line react/forbid-prop-types
+  canvasIndex: PropTypes.number.isRequired,
+  classes: PropTypes.objectOf(PropTypes.string).isRequired,
+  hasNextCanvas: PropTypes.bool,
+  hasPreviousCanvas: PropTypes.bool,
+  position: PropTypes.string.isRequired,
+  setNextCanvas: PropTypes.func,
+  setPreviousCanvas: PropTypes.func,
+  t: PropTypes.func.isRequired,
+  thumbnailNavigation: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types
+  view: PropTypes.string,
+  viewingDirection: PropTypes.string,
+  windowId: PropTypes.string.isRequired,
+};
+
+ThumbnailNavigation.defaultProps = {
+  hasNextCanvas: false,
+  hasPreviousCanvas: false,
+  setNextCanvas: () => {},
+  setPreviousCanvas: () => {},
+  view: undefined,
+  viewingDirection: '',
+};
diff --git a/node_modules/mirador/src/containers/ThumbnailNavigation.js b/node_modules/mirador/src/containers/ThumbnailNavigation.js
index e3be9a8..f8b66f4 100644
--- a/node_modules/mirador/src/containers/ThumbnailNavigation.js
+++ b/node_modules/mirador/src/containers/ThumbnailNavigation.js
@@ -8,7 +8,8 @@ import { ThumbnailNavigation } from '../components/ThumbnailNavigation';
 import {
   getCompanionWindow, getWindow,
   getNextCanvasGrouping, getPreviousCanvasGrouping,
-  getCanvasGroupings, getCanvasIndex, getWindowViewType,
+  getCanvasGroupings, getCanvasIndex,
+  getCurrentCanvas, getWindowViewType,
   getSequenceViewingDirection, getConfig,
 } from '../state/selectors';
 
@@ -19,7 +20,8 @@ import {
  */
 const mapStateToProps = (state, { windowId }) => ({
   canvasGroupings: getCanvasGroupings(state, { windowId }),
-  canvasIndex: getCanvasIndex(state, { windowId }),
+  canvasIndex: getCanvasIndex(state, { windowId }), // deprecated
+  currentCanvasId: (getCurrentCanvas(state, { windowId }) || {}).id,
   hasNextCanvas: !!getNextCanvasGrouping(state, { windowId }),
   hasPreviousCanvas: !!getPreviousCanvasGrouping(state, { windowId }),
   position: getCompanionWindow(state, {
diff --git a/node_modules/mirador/src/lib/CanvasGroupings.js b/node_modules/mirador/src/lib/CanvasGroupings.js
index 9939e86..69d502b 100644
--- a/node_modules/mirador/src/lib/CanvasGroupings.js
+++ b/node_modules/mirador/src/lib/CanvasGroupings.js
@@ -7,15 +7,19 @@ export default class CanvasGroupings {
   constructor(canvases, viewType = 'single') {
     this.canvases = canvases;
     this.viewType = viewType;
-    this._groupings = null; // eslint-disable-line no-underscore-dangle
+    this._groupings = null;
+    this._canvasGroupingMap = null;
   }
 
   /**
+   * @deprecated
    */
   getCanvases(index) {
     switch (this.viewType) {
+      case 'scroll':
+        return this.groupings()[0];
       case 'book':
-        return this.groupings()[Math.ceil(index / 2)];
+        return this.groupings()[this._canvasGroupingMap[index]];
       default:
         return this.groupings()[index];
     }
@@ -26,30 +30,94 @@ export default class CanvasGroupings {
    * of canvases, while book view creates pairs.
    */
   groupings() {
-    if (this._groupings) { // eslint-disable-line no-underscore-dangle
-      return this._groupings; // eslint-disable-line no-underscore-dangle
-    }
     if (this.viewType === 'scroll') {
       return [this.canvases];
     }
-    if (this.viewType !== 'book') {
-      return this.canvases.map(canvas => [canvas]);
+
+    if (this.viewType === 'book') {
+      return this.bookGroupings();
+    }
+
+    return this.canvases.map(canvas => [canvas]);
+  }
+
+  /**
+   * Return a grouping of canvases appropriate for a page-turning interface, where
+   * the first canvas is the first recto, and the second canvas is the back of the
+   * object in the first canvas.
+   *
+   * This implementation also supports behavior/viewing hints for canvases imaged as facing pages,
+   * as well as non-paged canvases (which are appended to the end of the group to preserve some
+   * access consistency)
+   */
+  bookGroupings() {
+    if (this._groupings) {
+      return this._groupings;
     }
+
     const groupings = [];
-    this.canvases.forEach((canvas, i) => {
-      if (i === 0) {
-        groupings.push([canvas]);
-        return;
+    const appendedGroupings = [];
+
+    let groupIndex = 0;
+
+    function appendCanvas(canvas, index) {
+      if (!groupings[index]) {
+        groupings[index] = [];
       }
-      // Odd page
-      if (i % 2 !== 0) {
-        groupings.push([canvas]);
+
+      groupings[index].push(canvas);
+    }
+
+    this.canvases.forEach((canvas, i) => {
+      const hint = canvas && (
+        (canvas.getBehavior && canvas.getBehavior())
+        || (canvas.getViewingHint && canvas.getViewingHint())
+      );
+
+      if (hint === 'non-paged') {
+        appendedGroupings.push([canvas]);
+      } else if (hint === 'facing-pages') {
+        if ((groupings[groupIndex] || []).length > 0) {
+          groupIndex += 1;
+        }
+
+        appendCanvas(canvas, groupIndex);
+
+        groupIndex += 1;
       } else {
-        // Even page
-        groupings[Math.ceil(i / 2)].push(canvas);
+        if ((groupings[groupIndex] || []).length >= 2) {
+          groupIndex += 1;
+        }
+
+        appendCanvas(canvas, groupIndex);
+
+        if (groupIndex == 0) {
+          groupIndex += 1;
+        }
       }
     });
-    this._groupings = groupings; // eslint-disable-line no-underscore-dangle
-    return groupings;
+
+    this._groupings = groupings.concat(appendedGroupings);
+    this._canvasGroupingMap = this._bookkeepGroupings(this._groupings);
+
+    return this._groupings;
+  }
+
+  /**
+   * To support pagination by canvas index (probably unused...), we need to maintain a mapping of
+   * a canvases index to the group index
+   */
+  _bookkeepGroupings(groupings) {
+    const canvasGroupingMap = [];
+    let canvasIndex = 0;
+
+    groupings.forEach((group, groupIndex) => {
+      group.forEach(canvas => {
+        canvasGroupingMap[canvasIndex] = groupIndex;
+        canvasIndex += 1;
+      })
+    });
+
+    return canvasGroupingMap;
   }
 }
