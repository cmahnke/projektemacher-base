{{- $debug := partialCached "functions/debug/enabled.html" . -}}
{{- $manifest := "manifest.json" -}}
{{- $iiif := slice -}}
{{- range . -}}
  {{- $page := . -}}
  {{- $formats := slice -}}
  {{- if not (isset .Params "outputs") -}}
    {{- if $debug -}}
      {{- warnf "[iiif/3/collection.json] Skipping %s since no explicit output is set" .RelPermalink -}}
    {{- end -}}
    {{- continue -}}
  {{/* This is needed to rendering of collections for tag pages */}}
  {{- else if reflect.IsSlice .Params.outputs -}}
    {{- if or (in .Params.outputs "iiif") -}}
      {{- $iiif = $iiif | append $page -}}
      {{- $formats = $formats | append $formats -}}
    {{- else if (in .Params.outputs "iiif-manifest") -}}
      {{- $iiif = $iiif | append $page -}}
      {{- $formats = $formats | append $formats -}}
    {{- end -}}
    {{ range .OutputFormats -}}
      {{- if or (eq .Name "iiif") (eq .Name "iiif-manifest") -}}
        {{- if not (in $formats .Name) -}}
          {{- $iiif = $iiif | append $page -}}
          {{- break -}}
        {{- end -}}
      {{- end -}}
    {{- else -}}
      {{/* TODO: This will never happen since .OutputFormats includes default 'html' and 'rss' */}}
      {{- warnf "[home.iiif-collection.json] Outputs for %s is slice: This is usually the case if a output format definition isn't in config.toml" .File.Path -}}
    {{ end -}}
  {{- end -}}
{{- end -}}
{{- if or (eq 0 (len $iiif)) (ne "page.Pages" (printf "%T" $iiif)) -}}
  {{- if $debug -}}
    {{- warnf "[iiif/3/collection.json] Skipping generation of IIIF collection since given pages don't contain manifest sources - certainly called via layouts/_default/term.iiif-collection.json" -}}
  {{- end -}}
{{- else -}}
  {{- $iiif = ($iiif | uniq).ByDate.Reverse  -}}
  {
    "@context": "http://iiif.io/api/presentation/3/context.json",
    "id": "{{ site.BaseURL }}collection.json",
    "type": "Collection",
    "label": {
        "{{ site.Language.Lang }}": [
          "{{ site.Title }}"
        ]
      {{- if hugo.IsMultilingual -}}
        {{- $translations := where site.Home.AllTranslations ".Lang" "!=" site.Language.Lang -}}
        {{- range $translations -}}
        ,
          "{{ .Lang }}": [
            "{{ .Name }}"
          ]
        {{ end }}
      {{- end -}}
    },
    "items": [
      {{- range $i, $item := $iiif -}}
        {{- with $item.Params.iiifManifest -}}
          {{- $manifest = path.Base . -}}
        {{- end -}}
        {
          "id": "{{ printf "%s%s/%s" site.BaseURL (substr $item.Path 1) $manifest }}",
          "type": "Manifest",

          {{- $thumbnail := trim (partial "iiif/3/thumbnail.json" .) "\n \t" -}}
          {{- if ne $thumbnail "" -}}
            {{- $thumbnail -}},
          {{- end -}}

          "label": {
            "{{ site.Language.Lang }}": [
              {{ $item.Title | jsonify }}
            ]
            {{- if hugo.IsMultilingual -}}
              {{- if .IsTranslated -}}
                {{- range .Translations -}}
                  ,
                  "{{ .Lang }}": [
                    {{ .Title | jsonify }}
                  ]
                {{- end -}}
              {{- end -}}
            {{- end -}}
          }
        }
        {{- if ne $i (sub (len $iiif) 1) -}}
         ,
        {{- end -}}
      {{- end -}}
    ]
  }
{{- end -}}
